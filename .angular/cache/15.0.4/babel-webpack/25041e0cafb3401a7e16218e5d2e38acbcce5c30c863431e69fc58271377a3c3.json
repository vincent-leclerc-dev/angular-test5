{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar CounterService = /** @class */function () {\n  function CounterService() {\n    this.metrics = [{\n      name: \"enableUser\" /* Metric.METRIC_ENABLE_USER */,\n      value: 0\n    }, {\n      name: \"disableUser\" /* Metric.METRIC_DISABLE_USER */,\n      value: 0\n    }];\n  }\n  CounterService.prototype.increment = function (metricKey) {\n    var index = this.metrics.findIndex(function (metric) {\n      return metric.name === metricKey;\n    });\n    this.metrics[index] = __assign(__assign({}, this.metrics[index]), {\n      value: this.metrics[index].value++\n    });\n  };\n  CounterService.prototype.disableUserCounter = function () {\n    var index = this.metrics.findIndex(function (metric) {\n      return metric.name === \"disableUser\" /* Metric.METRIC_DISABLE_USER */;\n    });\n    this.metrics[index] = __assign(__assign({}, this.metrics[index]), {\n      value: this.metrics[index].value++\n    });\n  };\n  return CounterService;\n}();\nexport { CounterService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}